@page "/analytics"
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject ILogger<Analytics> Logger;
@inject IDbContextFactory<BogorContext> DbFactory

<PageTitle>Dashboard</PageTitle>

<h1 class="title has-text-centered my-6">Dashboard</h1>

<NavLink class="button mb-6" href="/">
    <span class="icon is-small">
        <i class="fa-solid fa-arrow-left"></i>
    </span>
    <span>Back to Home</span>
</NavLink>

<div class="fixed-grid has-3-cols">
    <div class="grid">
        <div class="cell box">
            <p class="is-size-4">@_statistics.TotalCameras</p>
            <p>Total Cameras</p>
        </div>
        <div class="cell box">
            <p class="is-size-4">@_statistics.ActiveCameras</p>
            <p>Active Cameras</p>
        </div>
        <div class="cell box" style="margin-bottom: var(--bulma-block-spacing);">
            <p class="is-size-4">@_statistics.LastUpdatedAt.ToWIB().ToString("dd/MM/yyyy hh:mm:ss")</p>
            <p>Last Updated</p>
        </div>
    </div>
</div>

<div class="fixed-grid has-2-cols">
    <div class="grid">
        <div class="cell box">
            <p class="is-size-4">@_statistics.TotalAnalyses</p>
            <p>Total LLM Calls</p>
        </div>
        <div class="cell box" style="margin-bottom: var(--bulma-block-spacing);">
            <p class="is-size-4">@_statistics.TotalUsedTokens.ToString("N0")</p>
            <p>Total Used Tokens</p>
        </div>
    </div>
</div>

<div id="wrapper">
    <div id="chart-line2"></div>
    <div id="chart-line"></div>
</div>

@code {
    private IJSObjectReference? _module;
    private readonly Statistics _statistics = new();
    private List<VehicleVolumeChartItem> _vehicleVolumeChartData = [];


    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbFactory.CreateDbContextAsync();

        // statistics
        _statistics.TotalCameras = await context.Cameras.CountAsync();
        _statistics.ActiveCameras = await context.AnalysisResults
            .GroupBy(x => x.CameraId)
            .CountAsync();
        _statistics.LastUpdatedAt = await context.AnalysisHistories
            .Select(x => x.CreatedAt)
            .OrderByDescending(x => x)
            .FirstAsync();

        _statistics.TotalAnalyses = await context.AnalysisHistories.CountAsync();
        _statistics.TotalUsedTokens = await context.AnalysisHistories
            .SumAsync(x => x.InputTokens + x.OutputTokens);

        // get vehicle volume time series
        var vehicleVolumeTsRaw = await context.AnalysisResults
            .GroupBy(x => new { x.CreatedAt.Year, x.CreatedAt.Month, x.CreatedAt.Day, x.CreatedAt.Hour })
            .Select(x => new
            {
                date = x.Key,
                volume = x.Sum(p => p.TotalVehicles)
            })
            .ToListAsync();
        _vehicleVolumeChartData = vehicleVolumeTsRaw
            .Select(x => new VehicleVolumeChartItem($"{x.date.Year:0000}/{x.date.Month:00}/{x.date.Day:00} {x.date.Hour:00}:00", x.volume))
            .ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        // get JS interop
        _module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Analytics.razor.js");

        // render charts
        await _module.InvokeVoidAsync("renderVehicleVolumeTimeSeries", _vehicleVolumeChartData);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_module is not null)
        {
            try
            {
                await _module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }

    // --- VIEW MODELS
    public class Statistics
    {
        public int TotalCameras { get; set; }
        public int ActiveCameras { get; set; }
        public DateTime LastUpdatedAt { get; set; }

        public int TotalAnalyses { get; set; }
        public int TotalUsedTokens { get; set; }
    }

    public record VehicleVolumeChartItem(string Date, int Total);

}
