@page "/"
@using System.Text.Json.Serialization
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject ILogger<Home> Logger
@inject IDbContextFactory<BogorContext> DbFactory
@layout MapLayout
@rendermode InteractiveServer

<PageTitle>Bogor IntelliTraffic</PageTitle>

<div class="fixed-grid has-6-cols mb-0">
    <div class="grid container-full-height">
        <div class="cell is-col-span-2 container-sidebar">
            <h1 class="title has-text-centered mx-2 my-4">Bogor <span class="has-text-link">IntelliTraffic</span></h1>
            <div class="button-group mt-5">
                <NavLink href="/analytics" class="button">
                    <span class="icon">
                        <i class="fa-solid fa-chart-simple"></i>
                    </span>
                    <span>Analytics</span>
                </NavLink>
                <NavLink href="/cameras" class="button">
                    <span class="icon">
                        <i class="fa-solid fa-grip"></i>
                    </span>
                    <span>Cameras</span>
                </NavLink>
                <NavLink href="/about" class="button">
                    <span class="icon">
                        <i class="fa-solid fa-circle-info"></i>
                    </span>
                    <span>About</span>
                </NavLink>
            </div>

            <p class="has-text-centered p-3 mt-5">There are <strong>@_statistics.HighTrafficPoints</strong> locations
                with moderate to <strong>high</strong> traffic volume.</p>

            <div class="cctv-container">
                @foreach (var camera in _details)
                {
                    <div class="cctv-item">
                        <p class="has-text-weight-bold">@camera.GivenName</p>
                        <p>@camera.OverlayName</p>

                        <div class="is-flex mt-4">
                            <p class="mr-4"><i class="fa-solid fa-car"></i> @camera.TotalVehicles vehicles</p>
                            <p class="mr-4">
                                @if (camera.HasCrowding)
                                {
                                    <span><i class="fa-solid fa-users"></i> Crowded</span>
                                }
                                else
                                {
                                    <span><i class="fa-solid fa-user"></i> Not crowded</span>
                                }
                            </p>

                            @if (camera.HasAccident)
                            {
                                <p class="mr-4">
                                    <span><i class="fa-solid fa-car-burst"></i> Possible road accident</span>
                                </p>
                            }

                            @if (camera.Density != TrafficDensity.Unknown)
                            {
                                <p class="mr-4">
                                    @if (camera.Density == TrafficDensity.Light)
                                    {
                                        <span><i class="fa-solid fa-gauge-high"></i> Light traffic</span>
                                    }
                                    else if (camera.Density == TrafficDensity.Moderate)
                                    {
                                        <span><i class="fa-solid fa-gauge-high"></i> Moderate traffic</span>
                                    }
                                    else
                                    {
                                        <span><i class="fa-solid fa-gauge-high"></i> Heavy traffic</span>
                                    }
                                </p>
                            }
                        </div>

                        <p class="mr-4 mb-4"><i class="fa-solid fa-clock"></i> Last
                            updated: @camera.UpdatedAtString</p>

                        <NavLink class="button is-inverted mr-2" href="@($"/stream/{camera.CameraId}")">
                            <span class="icon is-small has-text-danger">
                                <i class="fa-solid fa-video"></i>
                            </span>
                            <span>Live Stream</span>
                        </NavLink>
                        <NavLink class="button is-link is-inverted" href="@($"/history/{camera.CameraId}")">
                            <span class="icon is-small">
                              <i class="fa-solid fa-clock-rotate-left"></i>
                            </span>
                            <span>View History</span>
                        </NavLink>
                    </div>
                }
            </div>
        </div>

        <div class="cell is-col-span-4">
            <div id="map"></div>
        </div>
    </div>
</div>

@code {
    private IJSObjectReference? _module;
    private List<CctvDetail> _details = [];
    private List<CctvMarker> _markers = [];
    private Statistics _statistics;

    private async Task ToggleTheme()
    {
        if (_module is null)
        {
            return;
        }

        await _module.InvokeVoidAsync("toggleTheme");
    }

    protected override async Task OnInitializedAsync()
    {
        // get latest status
        await using var context = await DbFactory.CreateDbContextAsync();
        var latestStatus = await context.LatestAnalyses
            .AsNoTracking()
            .Include(x => x.Result)
            .ThenInclude(x => x.Camera)
            .ToListAsync();

        var statusByCameraId = latestStatus.ToDictionary(k => k.CameraId, v => v.Result);
        var lastUpdateAtByCameraId = latestStatus.ToDictionary(k => k.CameraId, v => v.LastUpdate);

        // set map markers
        var cameras = await context.Cameras.AsNoTracking().ToListAsync();
        _markers = cameras.Select(x => new CctvMarker
        {
            CameraId = x.Id,
            Latitude = x.Latitude,
            Longitude = x.Longitude,
            GivenName = x.GivenName,
            OverlayName = x.OverlayName,
            Density = statusByCameraId.GetValueOrDefault(x.Id)?.TrafficDensity ?? TrafficDensity.Unknown
        }).ToList();

        _details = cameras.Select(x => new CctvDetail
        {
            CameraId = x.Id,
            GivenName = x.GivenName,
            OverlayName = x.OverlayName,
            TotalVehicles = statusByCameraId.GetValueOrDefault(x.Id)?.TotalVehicles ?? 0,
            HasCrowding = statusByCameraId.GetValueOrDefault(x.Id)?.HasCrowding ?? false,
            HasAccident = statusByCameraId.GetValueOrDefault(x.Id)?.HasAccident ?? false,
            Density = statusByCameraId.GetValueOrDefault(x.Id)?.TrafficDensity ?? 0,
            UpdatedAtString = lastUpdateAtByCameraId.TryGetValue(x.Id, out var date) ? date.ToString("dd/MM/yyyy hh:mm") : "Not yet updated",
        }).ToList();
        
        _statistics = new Statistics
        {
            HighTrafficPoints = latestStatus.Count(x => x.Result?.TrafficDensity is TrafficDensity.Moderate or TrafficDensity.Heavy)
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        // render leaflet.js
        _module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Home.razor.js");
        await _module.InvokeVoidAsync("initMap");
        await _module.InvokeVoidAsync("setMarkers", _markers);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_module is not null)
        {
            try
            {
                await _module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }

    // --- VIEW MODELS
    public record CctvMarker
    {
        public required Guid CameraId { get; init; }
        public required double Latitude { get; init; }
        public required double Longitude { get; init; }
        public required string GivenName { get; init; }
        public required string OverlayName { get; init; }

        [JsonConverter(typeof(JsonStringEnumConverter))]
        public required TrafficDensity Density { get; init; }
    }

    public record CctvDetail
    {
        public required Guid CameraId { get; init; }
        public required string GivenName { get; init; }
        public required string OverlayName { get; init; }
        public required int TotalVehicles { get; init; }
        public required bool HasCrowding { get; init; }
        public required bool HasAccident { get; init; }
        public required TrafficDensity Density { get; init; }
        public required string UpdatedAtString { get; init; }
    }

    public record Statistics
    {
        public required int HighTrafficPoints { get; init; }
    }

}    
