@page "/stream/{CameraId:guid}"
@using Microsoft.Extensions.Options
@inject ILogger<Stream> Logger;
@inject IDbContextFactory<BogorContext> DbFactory
@inject IOptions<AnalysisConfig> Config
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>[🔴LIVE] @(_camera?.GivenName ?? "CCTV Bogor")</PageTitle>

@if (_state == ViewState.Loading)
{
    <p>
        <em>Loading...</em>
    </p>
    return;
}

@if (_state == ViewState.NotFound)
{
    <p>No registered camera is found.</p>
    return;
}

<div class="is-flex is-flex-direction-column is-align-items-center">
    <h2 class="title has-text-centered mt-6 mb-3">@_camera.GivenName</h2>
    <h4 class="subtitle has-text-centered mb-4">@_camera.OverlayName</h4>

    <div class="is-flex is-flex-direction-row my-6" style="column-gap: 0.5rem;">
        <NavLink class="button" href="/">
            <span class="icon is-small">
                <i class="fa-solid fa-arrow-left"></i>
            </span>
            <span>Back to Home</span>
        </NavLink>
        <NavLink class="button" href="@($"/history/{_camera.Id}")">
            <span class="icon is-small">
                <i class="fa-solid fa-clock-rotate-left"></i>
            </span>
            <span>View History</span>
        </NavLink>
    </div>

    <p id="player-status" class="mb-2">Connecting...</p>
    <video id="cctv-live-stream" autoplay controls muted></video>
</div>

<script>    
    window.playCCTV = (stream_url) => {
        new MediaMTXWebRTCReader({
            url: new URL(stream_url),
            onError: (err) => {
                const statusElement = document.getElementById('player-status');
                
                console.error(err);
                statusElement.textContent = err;
                statusElement.classList.remove("is-hidden");
            },
            onTrack: (evt) => {
                const statusElement = document.getElementById('player-status');
                const videoElement = document.getElementById('cctv-live-stream');
                
                statusElement.classList.add("is-hidden");
                videoElement.srcObject = evt.streams[0];
            },
        });
    }
</script>

@code {
    [Parameter] public Guid CameraId { get; set; }

    private ViewState _state = ViewState.Loading;
    private Camera? _camera;

    protected override async Task OnParametersSetAsync()
    {
        await using var context = await DbFactory.CreateDbContextAsync();
        _camera = await context.Cameras.SingleOrDefaultAsync(x => x.Id == CameraId);
        if (_camera is null)
        {
            _state = ViewState.NotFound;
            Logger.LogWarning("Camera not found");
            return;
        }

        _state = ViewState.Ok;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        
        var streamUrl = string.Format(Config.Value.WebRTCStreamingFormatUri, _camera.HlsStreamName);
        await JS.InvokeVoidAsync(@"playCCTV", streamUrl);
    }
}
